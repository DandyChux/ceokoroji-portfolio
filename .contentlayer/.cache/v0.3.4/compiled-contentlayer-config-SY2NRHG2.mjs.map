{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts", "../../../src/env/env.mjs", "../../../src/env/client.mjs", "../../../src/env/server.mjs", "../../../src/lib/prisma.ts"],
  "sourcesContent": ["import { defineDocumentType } from 'contentlayer/source-files'\nimport { makeSource } from 'contentlayer/source-remote-files'\nimport { writeFile } from 'fs/promises'\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings'\nimport rehypePrettyCode from 'rehype-pretty-code'\nimport rehypeSlug from 'rehype-slug'\nimport remarkGfm from 'remark-gfm'\nimport { prisma } from './src/lib/prisma'\n\nexport const Post = defineDocumentType(() => ({\n    name: 'Post',\n    filePathPattern: `**/*.mdx`,\n    contentType: 'mdx',\n    fields: {\n        title: {\n            type: 'string',\n            required: true,\n        },\n        date: {\n            type: 'date',\n            required: true,\n        },\n        description: {\n            type: 'string',\n            required: true,\n        },\n        published: {\n            type: 'boolean',\n            default: true,\n        },\n        tags: {\n            type: 'list',\n            of: {\n                type: 'enum',\n                options: ['AI & Machine Learning', 'Cybersecurity', 'Software Development', 'Tech Industry News', 'Gadgets & Hardware', 'Web Development', 'Mobile Tech', 'Emerging Tech', 'Programming', 'SEO', 'AR & VR', 'Album Reviews', 'Artist Spotlights', 'Music Industry News', 'Music Theory', 'Concerts & Live Shows', 'Hip-Hop/Rap', 'R&B', 'Team Profiles', 'Match Analysis', 'Player Profiles', 'Sports News', 'Commentary & Opinions', 'Training', 'Game Reviews', 'Gaming News', 'Game Design', 'eSports', 'Game Guides', 'Indie Games']\n            },\n        },\n        category: {\n            type: 'enum',\n            options: ['General', 'Tech', 'Life', 'Sports', 'Music', 'Games', 'Movies', 'Books', 'Food', 'Travel'],\n            default: 'General',\n        }\n    },\n    computedFields: {\n        slug: {\n            type: 'string',\n            resolve: (post) => `/${post._raw.flattenedPath}`,\n        },\n        slugAsParams: {\n            type: 'string',\n            resolve: (post) => post._raw.flattenedPath,\n        },\n        url: {\n            type: 'string',\n            resolve: (post) => `/blog/${post._raw.flattenedPath}`\n        }\n    },\n}))\n\nconst syncContentFromDatabase = async (contentDir: string) => {\n    let wasCancelled = false;\n    let syncInterval: string | number | NodeJS.Timeout | undefined\n\n    const syncRun = async () => {\n        const posts = await prisma.post.findMany()\n\n        for (const post of posts) {\n            const filePath = `${contentDir}/${post.slug}.mdx`\n            await writeFile(filePath, post.content)\n        }\n    }\n\n    const syncLoop = async () => {\n        await syncRun()\n\n        if (wasCancelled) return\n\n        syncInterval = setTimeout(syncLoop, 1000 * 60)\n    }\n\n    // Block until the first loop is done\n    await syncLoop()\n\n    return () => {\n        wasCancelled = true\n        clearTimeout(syncInterval)\n    }\n}\n\nexport default makeSource({\n    syncFiles: syncContentFromDatabase,\n    contentDirPath: 'posts',\n    documentTypes: [Post],\n    disableImportAliasWarning: true,\n    mdx: {\n        remarkPlugins: [remarkGfm],\n        rehypePlugins: [\n            rehypeSlug,\n            [\n                rehypePrettyCode,\n                {\n                    theme: 'github-dark',\n                    onVisitLine(node: any) {\n                        // Prevent lines from collasping in `display: grid` mode, and allow empty lines to be copied\n                        if (node.children.length === 0) {\n                            node.children = [{ type: 'text', value: ' ' }]\n                        }\n                    },\n                    onVisitHighlightedLine(node: any) {\n                        node.properties.className.push('line--highlighted')\n                    },\n                    onVisitHighlightedWord(node: any) {\n                        node.properties.className = ['word--highlighted']\n                    }\n                }\n            ],\n            [\n                rehypeAutolinkHeadings,\n                {\n                    properties: {\n                        className: ['subheading-anchor'],\n                        ariaLabel: 'Link to section',\n                    }\n                }\n            ]\n        ]\n    }\n})", "// @ts-check\nimport { z } from \"zod\";\n\n/**\n * Specify your server-side environment variables schema here.\n * This way you can ensure the app isn't built with invalid env vars.\n */\nexport const serverSchema = z.object({\n  NODE_ENV: z.enum([\"development\", \"test\", \"production\"]),\n  DATABASE_URL: z.string().url({ message: \"Invalid url\" }),\n  SENDGRID_API_KEY: z.string(),\n});\n\n/**\n * Specify your client-side environment variables schema here.\n * This way you can ensure the app isn't built with invalid env vars.\n * To expose them to the client, prefix them with `NEXT_PUBLIC_`.\n */\nexport const clientSchema = z.object({\n  // NEXT_PUBLIC_CLIENTVAR: z.string(),\n});\n\n/**\n * You can't destruct `process.env` as a regular object, so you have to do\n * it manually here. This is because Next.js evaluates this at build time,\n * and only used environment variables are included in the build.\n * @type {{ [k in keyof z.infer<typeof clientSchema>]: z.infer<typeof clientSchema>[k] | undefined }}\n */\nexport const clientEnv = {\n  // NEXT_PUBLIC_CLIENTVAR: process.env.NEXT_PUBLIC_CLIENTVAR,\n};\n", "// @ts-check\nimport { clientEnv, clientSchema } from \"./env.mjs\";\n\nconst _clientEnv = clientSchema.safeParse(clientEnv);\n\nexport const formatErrors = (\n  /** @type {import('zod').ZodFormattedError<Map<string,string>,string>} */\n  errors,\n) =>\n  Object.entries(errors)\n    .map(([name, value]) => {\n      if (value && \"_errors\" in value)\n        return `${name}: ${value._errors.join(\", \")}\\n`;\n    })\n    .filter(Boolean);\n\nif (!_clientEnv.success) {\n  console.error(\n    \"\u274C Invalid environment variables:\\n\",\n    ...formatErrors(_clientEnv.error.format()),\n  );\n  throw new Error(\"Invalid environment variables\");\n}\n\nfor (let key of Object.keys(_clientEnv.data)) {\n  if (!key.startsWith(\"NEXT_PUBLIC_\")) {\n    console.warn(\n      `\u274C Invalid public environment variable name: ${key}. It must begin with 'NEXT_PUBLIC_'`,\n    );\n\n    throw new Error(\"Invalid public environment variable name\");\n  }\n}\n\nexport const env = _clientEnv.data;\n", "// @ts-check\n/**\n * This file is included in `/next.config.mjs` which ensures the app isn't built with invalid env vars.\n * It has to be a `.mjs`-file to be imported there.\n */\nimport { env as clientEnv, formatErrors } from \"./client.mjs\";\nimport { serverSchema } from \"./env.mjs\";\n\nconst _serverEnv = serverSchema.safeParse(process.env);\n\nif (!_serverEnv.success) {\n  console.error(\n    \"\u274C Invalid environment variables:\\n\",\n    ...formatErrors(_serverEnv.error.format()),\n  );\n  throw new Error(\"Invalid environment variables\");\n}\n\nfor (let key of Object.keys(_serverEnv.data)) {\n  if (key.startsWith(\"NEXT_PUBLIC_\")) {\n    console.warn(\"\u274C You are exposing a server-side env-variable:\", key);\n\n    throw new Error(\"You are exposing a server-side env-variable\");\n  }\n}\n\nexport const env = { ..._serverEnv.data, ...clientEnv };\n", "import { env } from \"../env/server.mjs\";\nimport { PrismaClient } from \"@prisma/client\";\n\nconst globalForPrisma = global as unknown as {\n    prisma: PrismaClient | undefined;\n}\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient({\n    log: ['query'],\n})\n\nif (env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;"],
  "mappings": "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",
  "names": ["env", "env"]
}
